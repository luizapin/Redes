#include<stdio.h> //printf
#include<string.h> //strlen
#include<sys/socket.h> //socket
#include<arpa/inet.h> //inet_addr
#include<time.h>
 
int main(int argc , char *argv[])
{
 int sock;
 struct sockaddr_in server;
 char server_reply[80];
 //int number[10],i, protocol, aux = 1; //slen = sizeof(client);
 int i, aux=1;
 double numOfPackets = 0;
 int sumOfTime = 0;
 float *v;
 char temp[10];
 clock_t inicio, fim;



 //Create socket
 sock = socket(AF_INET , SOCK_STREAM , 0);
 if (sock == -1)
 {
 printf("Could not create socket");
 }
 puts("Socket created");
 
 server.sin_addr.s_addr = inet_addr("127.0.0.1");
 server.sin_family = AF_INET;
 server.sin_port = htons( 8880 );
 
 //Connect to remote server
 if (connect(sock , (struct sockaddr *)&server , sizeof(server)) < 0)
 {
 perror("connect failed. Error");
 return 1;
 }
 
 puts("Connected\n");
 


printf("\nQuantos pacotes devem ser enviados: ");
	scanf("%lf", &numOfPackets);

	v = (int *) malloc(numOfPackets * sizeof(int));

printf("\nEscreva a mensagem a ser enviada: ");
		scanf("%s", temp);

for( i = 1 ; i <= numOfPackets; i++ ){
			inicio = clock();

			if( send(sock , &temp, 10*sizeof(int) , 0) < 0) {
				puts("Send failed");
				return 1;
			} // fim if
			 
			 //Receive a reply from the server
			if( recv(sock , &server_reply , 10*sizeof(int), 0) < 0) {
				puts("recv failed");
				return;
			} // fim if
			
			fim = clock();
			v[i] = (fim - inicio);
			sumOfTime = sumOfTime + (fim - inicio);

		} // fim for

		bubble_sort(v, i);
		 
		puts("Server reply :\n");
		puts(server_reply);
		
		printf("Tempo mínimo: %.2f milissegundos.\n",v[1]);
		printf("Tempo médio: %0.2f milissegundos.\n",sumOfTime/numOfPackets);
		printf("Tempo máximo: %0.2f milissegundos.\n",v[i-1]);

 close(sock);

	return 0;
} // fim função main

void bubble_sort(int list[], int n)
{
	 int c, d, t;
	 
	for (c = 0 ; c < ( n - 1 ); c++) {
		for (d = 0 ; d < n - c - 1; d++) {
			if (list[d] > list[d+1]) {
			/* Swapping */
			t = list[d];
			list[d] = list[d+1];
			list[d+1] = t;
			} // fim if
		} // fim for interno
	} // fim for externo
} // fim função bubble_sort